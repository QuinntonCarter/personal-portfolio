{"version":3,"sources":["context/forecastContext.js","components/main.js","components/searchForecast.js","app.js","index.js"],"names":["ForecastContext","React","createContext","ForecastContextProvider","props","useState","data","autoLocation","setAutoLocation","ipData","setIpData","toggle","setToggle","navigate","useNavigate","searchedLocation","setSearchedLocation","setDay","now","Date","forecastDays","getDates","num","next","date","addDays","format","i","days","push","useEffect","axios","get","then","res","city","catch","err","console","log","Provider","value","getForecast","location","finally","children","Main","useContext","timeStyle","tempStyle","inputs","setInputs","handleSubmit","e","preventDefault","onSubmit","className","bgColor","icon","required","style","fontSize","name","onChange","target","prevInputs","placeholder","btnColorH","btnColor","onClick","length","region","country","Math","floor","current","temp_f","src","condition","alt","text","humidity","viewBox","SearchForecast","timedFont","forecast","forecastday","day","avgtemp_f","to","App","time","timedImg","img","textColor","backgroundImage","backgroundPosition","backgroundSize","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f1b09b1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport date from 'date-and-time';\n\n// *** implement error handling ***\n\nconst ForecastContext = React.createContext();\n\nexport default function ForecastContextProvider(props){\n    const [autoLocation, setAutoLocation] = useState({\n        data: ''\n    });\n    const [ ipData, setIpData ] = useState({\n        data: ''\n    });\n    const [toggle, setToggle] = useState(false);\n    const navigate = useNavigate();\n\n    const [searchedLocation, setSearchedLocation] = useState({});\n\n    const [day, setDay] = useState('');\n    const now = new Date();\n    const forecastDays = [];\n\n    function getDates(num){\n        const next = date.addDays(now, +num)\n        return date.format(next, `dddd MM DD`)\n    };\n\n    for(let i = 0; i <= 2; i++){\n        const days = getDates(i)\n        forecastDays.push(days)\n    };\n\n    function findDate(){\n        return setDay(date.format(now, `dddd MM DD`))\n    };\n\n    function autoDetectLocation(){\n        axios.get('https://ipapi.co/json/')\n        .then(res => \n            axios.get(`http://api.weatherapi.com/v1/current.json?key=fdd79d1d2ca9485abab32815211205&q=${res.data.city}`)\n            .then(res => \n                setAutoLocation({\n                    data: res.data\n                }),\n                )\n            .catch(err => console.log(err))\n        )\n        .catch(err => console.log(err))\n    };\n\n    function autoDetectLocationName(){\n        axios.get('https://ipapi.co/json/')\n        .then(res =>\n            setIpData({\n                data: res.data\n            }),\n            )\n            .catch(err => console.log(err))\n    };\n\n    function getForecast(location){\n        axios.get(`http://api.weatherapi.com/v1/forecast.json?key=fdd79d1d2ca9485abab32815211205&q=${location}&days=7&aqi=yes`)\n        .then(res => setSearchedLocation(res.data))\n        .catch(err => console.log(err))\n        .finally(() => {\n                navigate('/searchForecast')\n            }\n        )\n    };\n\n    useEffect (() => {\n        autoDetectLocation()\n        autoDetectLocationName()\n        findDate()\n    },[])\n\n\n    return(\n        <ForecastContext.Provider \n        value={{\n            now,\n            ipData,\n            autoLocation,\n            getForecast,\n            searchedLocation,\n            setSearchedLocation,\n            setToggle,\n            toggle,\n            forecastDays\n        }}\n        >\n            {props.children}\n        </ForecastContext.Provider>\n    )\n}\n\nexport { ForecastContextProvider, ForecastContext }","import React, { useContext, useState } from 'react';\n\nimport { ForecastContext } from '../context/forecastContext';\n\nexport default function Main(props){\n    const {\n        autoLocation,\n        forecastDays,\n        getForecast,\n        ipData\n    } = useContext(ForecastContext)\n\n    const {\n        timeStyle,\n        tempStyle\n    } = props\n\n    const [inputs, setInputs] = useState({\n        location:''\n    })\n\n    function handleChange(e){\n        const { name, value } = e.target\n        setInputs(prevInputs => ({...prevInputs, [name]: value}))\n    }\n\n    function handleSubmit(e){\n        e.preventDefault()\n        getForecast(inputs.location)\n    }\n\n    return(\n            <form onSubmit={handleSubmit} className={`grid rounded-lg p-12 grid-cols-1 grid-rows-1 bg-${timeStyle().bgColor} bg-opacity-60 m-auto`}>\n                <h1 className='text-7xl pb-3'>\n                    <i className={`${timeStyle().icon} ${tempStyle()}`}/>\n                </h1>\n                <input required style={{fontSize:'70%'}} className='bg-gray-200 rounded-xl m-4 p-1 w-40 h-10 text-center text-black mx-auto' name='location' value={inputs.location} onChange={handleChange} placeholder='enter city or zip code'/>\n                <button className={`font-medium m-2 shadow hover:bg-${timeStyle().btnColorH} text-white bg-${timeStyle().btnColor} p-3 rounded-full`} onClick={() => inputs.location.length > 0 ? handleSubmit : null}> check forecast </button>\n                { autoLocation.data ? \n                    <div className='m-4 grid grid-cols-1 mx-auto place-items-center'>\n                        <h2 className='font-medium text-xl'> {forecastDays[0]} </h2>\n                        <h1 className='font-medium text-lg'> {`${ipData.data.city}, ${ipData.data.region}, ${ipData.data.country}`} </h1>\n                        <h2 className='font-bold' style={{fontSize: '250%'}}> {Math.floor(autoLocation.data.current.temp_f)}˚F</h2>\n                        <img className='font-medium text-lg' src={autoLocation.data.current.condition.icon} alt='condition visual'/>\n                        <h3 className='font-medium text-lg'> {autoLocation.data.current.condition.text}</h3>\n                        <h4> Humidity: {autoLocation.data.current.humidity}% </h4>\n                    </div>\n                    :\n                    <div className=\"bg-blue-600\">\n                        <svg className=\"animate-spin h-5 w-5 mr-3 ...\" viewBox=\"0 0 24 24\"/>\n                        Loading\n                    </div>\n                }\n        </form>\n    )\n}","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ForecastContext } from '../context/forecastContext'\n\nexport default function SearchForecast(props){\n    const {\n        searchedLocation,\n        setSearchedLocation,\n        forecastDays,\n        ipData\n    } = useContext(ForecastContext)\n\n    const {\n        timeStyle,\n        timedFont\n    } = props\n\n    return(\n        <div className={`grid rounded-lg p-6 text-${timedFont} grid-cols-1 grid-rows-1 bg-${timeStyle().bgColor} bg-opacity-60 m-auto`}>\n            { searchedLocation.location ? \n                <div className='m-4 grid grid-cols-1 mx-auto place-items-center'>\n                    <div className='grid bg-gray-500 rounded mx-auto place-items-center'>\n                        <span className='bg-gray-800 p-4 grid mx-auto place-items-center opacity-80 rounded mb-4'>\n                            <h2 className='font-medium text-xl'> {forecastDays[0]} </h2>\n                            <h1 className='font-medium text-lg'> {`${ipData.data.city}, ${ipData.data.region}, ${ipData.data.country}`} </h1>\n                            <h1 className='font-bold text-3xl'> {Math.floor(searchedLocation.current.temp_f)}˚ </h1>\n                            <img src={searchedLocation.current.condition.icon} alt='condition description'/>\n                            <h2> {searchedLocation.current.condition.text} </h2>\n                            <h3> Humidity: {searchedLocation.current.humidity}% </h3>\n                        </span>\n                        <h3 className='font-medium text-xl'> {forecastDays[1]} </h3>\n                        <h2 className='font-bold text-3xl'> {Math.floor(searchedLocation.forecast.forecastday[1].day.avgtemp_f)}˚ </h2>\n                        <img src={searchedLocation.forecast.forecastday[1].day.condition.icon} alt='condition visual'/>\n                        <h4 className='font-medium text-lg'> {searchedLocation.forecast.forecastday[1].day.condition.text} </h4>\n                        <h2 className='font-extrabold text-5xl p-1'> & </h2>\n                        <h3 className='font-medium text-xl'> {forecastDays[2]} </h3>\n                        <h2 className='font-bold text-3xl'> {Math.floor(searchedLocation.forecast.forecastday[2].day.avgtemp_f)}˚ </h2>\n                        <img src={searchedLocation.forecast.forecastday[2].day.condition.icon} alt='condition visual'/>\n                        <h4 className='font-medium text-lg'> {searchedLocation.forecast.forecastday[2].day.condition.text} </h4>\n                        <Link to='/'>\n                            <button style={{fontSize: '70%'}} className={`font-medium m-2 shadow hover:bg-gray-700 text-white bg-gray-600 p-2 rounded-full`} onClick={() => setSearchedLocation('') }> new location </button> \n                        </Link>\n                    </div>\n                </div>\n                :\n                <>\n                    <h2> Loading ... </h2>\n                    <Link to='/'>\n                        <button style={{fontSize: '70%'}} className={`font-medium m-2 shadow hover:bg-gray-700 text-white bg-gray-500 p-3 rounded-full`} onClick={() => setSearchedLocation('')  }> new location </button> \n                    </Link>\n                </>\n            }\n        </div>\n    )\n}","import React, { useContext } from 'react';\nimport { Routes, Route, useNavigate } from 'react-router-dom';\n\nimport Main from './components/main'\nimport SearchForecast from './components/searchForecast'\nimport date from 'date-and-time';\nimport { ForecastContext } from './context/forecastContext';\n\nexport default function App(){\n    const {\n        now,\n        autoLocation,\n        searchedLocation\n    } = useContext(ForecastContext);\n\n    let time = date.format(now, \"HH:mm\");\n\n    const navigate = useNavigate();\n\n    const timedImg = () => {\n        if(time > \"06:00\" & time < \"17:45\"){\n            return {\n                img: \"https://images.unsplash.com/photo-1610736702440-9dfab24cd7da?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8Y2xvdWRzJTIwaW4lMjBza3l8ZW58MHx8MHx8&w=1000&q=80\",\n                textColor: \"black\"\n            }\n        } if(time > \"17:46\" & time < \"18:59\" ){\n            return {\n                img: \"https://i.pinimg.com/736x/0b/86/0d/0b860d32fc7b0bff00ac320137305e8f.jpg\",\n                textColor: \"white\"\n            }\n        } else {\n            return { \n                img: \"https://media.istockphoto.com/videos/thunderstorm-clouds-at-night-with-lightning-4k-timelapse-loop-video-id875093832?s=640x640\",\n                textColor: \"white\"\n            }\n        }\n    }\n\n    const tempStyle = () => {\n        let coldTemp = autoLocation.data ? Math.floor(autoLocation.data.current.temp_f) <= 35 : false\n        if(coldTemp){\n            return \"far fa-snowflake\"\n        } else {\n            return \"\"\n        }\n    }\n    // https://media.istockphoto.com/videos/thunderstorm-clouds-at-night-with-lightning-4k-timelapse-loop-video-id875093832?s=640x640\n    const timeStyle = () => {\n        let time = date.format(now, \"HH:mm\");\n            if(time > \"06:00\" & time < \"11:59\"){\n                return {\n                    icon: \"fas fa-sun text-yellow-400 opacity-80\",\n                    bgColor: \"white\",\n                    btnColor: \"blue-200\",\n                    btnColorH: \"blue-500\"\n                }\n            } if(time > \"12:00\" & time < \"14:49\"){\n                return {\n                    icon: \"fas fa-sun text-yellow-500 opacity-80\",\n                    bgColor: \"white\",\n                    btnColor: \"blue-200\",\n                    btnColorH: \"blue-500\"\n                }\n            } if(time > \"17:46\" & time < \"18:59\"){\n                return {\n                    icon: \"fas fa-sun text-yellow-600 opacity-80\",\n                    bgColor: \"gray-200\",\n                    btnColor: \"blue-500\",\n                    btnColorH: \"blue-700\"\n                }\n            } else {\n                return {\n                    icon: \"far fa-moon text-blue-900 opacity-70\",\n                    bgColor: \"gray-200\",\n                    btnColor: \"blue-600\",\n                    btnColorH: \"blue-700\"\n                }\n            }\n    }\n    \n    return (\n        <div style={{backgroundImage:`url(${timedImg().img})`, backgroundPosition: 'center', backgroundSize: 'cover'}} className={`grid pb-20 items-center text-center text-${timedImg().textColor} justify-center h-screen border-solid border-8 border-white`}>\n            <i className={`fas fa-umbrella text-${timedImg().textColor} text-xl`}></i>\n            <Routes>\n                <Route path='/'\n                    element={<Main timeStyle={timeStyle} timedFont={timedImg().textColor} tempStyle={tempStyle}/>}\n                />\n\n                <Route path='/searchForecast'\n                    element={\n                        <SearchForecast\n                            timeStyle={timeStyle}\n                            tempStyle={tempStyle}/>}\n                />\n            </Routes>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\nimport './index.css'\n\nimport { BrowserRouter } from 'react-router-dom';\nimport { ForecastContextProvider } from './context/forecastContext';\n\nReactDOM.render(\n    <BrowserRouter>\n        <ForecastContextProvider>\n            <App/>\n        </ForecastContextProvider>\n    </BrowserRouter>,\n    document.getElementById('root'))"],"sourceRoot":""}